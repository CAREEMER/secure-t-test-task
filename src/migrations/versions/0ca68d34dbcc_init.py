"""init

Revision ID: 0ca68d34dbcc
Revises: 
Create Date: 2022-10-24 12:18:09.314296

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0ca68d34dbcc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("username", sa.Text(), nullable=False),
        sa.Column("password", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=False)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "comment",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("author_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_comment_id"), "comment", ["id"], unique=False)
    op.create_table(
        "post",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("author_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_post_id"), "post", ["id"], unique=False)
    op.create_table(
        "session",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("key", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id", "key"),
    )
    op.create_index(op.f("ix_session_id"), "session", ["id"], unique=False)
    op.create_index(op.f("ix_session_key"), "session", ["key"], unique=False)
    op.create_table(
        "commentupvote",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("comment_uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("positive", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["comment_uuid"],
            ["comment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_commentupvote_comment_uuid"), "commentupvote", ["comment_uuid"], unique=False)
    op.create_index(op.f("ix_commentupvote_id"), "commentupvote", ["id"], unique=False)
    op.create_index(op.f("ix_commentupvote_user_id"), "commentupvote", ["user_id"], unique=False)
    op.create_table(
        "postupvote",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("time_created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("post_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("positive", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["post.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_postupvote_id"), "postupvote", ["id"], unique=False)
    op.create_index(op.f("ix_postupvote_post_id"), "postupvote", ["post_id"], unique=False)
    op.create_index(op.f("ix_postupvote_user_id"), "postupvote", ["user_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_postupvote_user_id"), table_name="postupvote")
    op.drop_index(op.f("ix_postupvote_post_id"), table_name="postupvote")
    op.drop_index(op.f("ix_postupvote_id"), table_name="postupvote")
    op.drop_table("postupvote")
    op.drop_index(op.f("ix_commentupvote_user_id"), table_name="commentupvote")
    op.drop_index(op.f("ix_commentupvote_id"), table_name="commentupvote")
    op.drop_index(op.f("ix_commentupvote_comment_uuid"), table_name="commentupvote")
    op.drop_table("commentupvote")
    op.drop_index(op.f("ix_session_key"), table_name="session")
    op.drop_index(op.f("ix_session_id"), table_name="session")
    op.drop_table("session")
    op.drop_index(op.f("ix_post_id"), table_name="post")
    op.drop_table("post")
    op.drop_index(op.f("ix_comment_id"), table_name="comment")
    op.drop_table("comment")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
